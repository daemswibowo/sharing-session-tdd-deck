{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/print","webpackCompilationHash":"f4017d9d3e19e3509c5a","result":{"data":{"deck":{"id":"7f9781ba-9181-5202-b30c-15c2405dd673","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = github;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Test-driven Development (TDD)\"), mdx(\"small\", {\n    style: {\n      color: 'green'\n    }\n  }, \"By Dimas Wibowo\"), mdx(\"hr\", null), mdx(\"h1\", null, \"What is TDD ?\"), mdx(\"div\", {\n    style: {\n      textAlign: 'center'\n    }\n  }, mdx(\"small\", null, \"Test-driven development (TDD) is a software development process relying on software requirements being converted to test cases before software is fully developed, and tracking all software development by repeatedly testing the software against all test cases.\"), mdx(\"br\", null), mdx(\"a\", {\n    href: \"https://en.wikipedia.org/wiki/Test-driven_development\"\n  }, \"Source Wikipedia\")), mdx(\"hr\", null), mdx(\"h1\", null, \"Why ?\"), mdx(\"div\", {\n    style: {\n      textAlign: 'center',\n      padding: 20\n    }\n  }, \"TDD promotes a test-then-code approach. It\\u2019s based on the idea that if developers use test cases before writing functionality, they can create better software and, often, complete the project faster. This approach is different from normal software testing, where they generate the code first and only then test it.\"), mdx(\"hr\", null), mdx(\"h1\", null, \"Automation Test Pyramid\"), mdx(\"div\", {\n    style: {\n      textAlign: 'center'\n    }\n  }, mdx(\"img\", {\n    style: {\n      maxHeight: 500\n    },\n    src: pyramid,\n    alt: \"pyramid\"\n  })), mdx(\"hr\", null), mdx(\"h1\", null, \"The flow\"), mdx(\"div\", null, mdx(\"img\", {\n    style: {\n      maxHeight: 600\n    },\n    src: tddFLow,\n    alt: \"Flow\"\n  })), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [github, vsDark],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"h1\", null, \"Benefit of using TDD\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"1\"\n  }), \"\"))), mdx(Step, {\n    subtitle: \"Through its test-first approach, it gives developers the opportunity to consider more carefully the usability challenges users are likely to face\",\n    mdxType: \"Step\"\n  }, mdx(\"h1\", null, \"Benefit of using TDD\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"1\"\n  }), \"# Develop highly usable software\\n\"))), mdx(Step, {\n    subtitle: \"Tests ensure that the code stays focused and clear during each stage of development.\",\n    mdxType: \"Step\"\n  }, mdx(\"h1\", null, \"Benefit of using TDD\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"2\"\n  }), \"# Develop highly usable software\\n# Reduce bugs\\n\"))), mdx(Step, {\n    subtitle: \"With TDD, it\\u2019s easy to spot functionality issues even as the software is being developed, which allows for these to be more quickly addressed.\",\n    mdxType: \"Step\"\n  }, mdx(\"h1\", null, \"Benefit of using TDD\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"3\"\n  }), \"# Develop highly usable software\\n# Reduce bugs\\n# Identify functionality issues\\n\"))), mdx(Step, {\n    subtitle: \"The result is a tidy codebase free from unnecessary duplication, which makes the software easier to tweak and maintain.\",\n    mdxType: \"Step\"\n  }, mdx(\"h1\", null, \"Benefit of using TDD\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"4\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"4\"\n  }), \"# Develop highly usable software\\n# Reduce bugs\\n# Identify functionality issues\\n# Avoid code duplication\\n\"))), mdx(Step, {\n    subtitle: \"TDD requires developers to write code in response to test requirements. This approach promotes the simplification of code.\",\n    mdxType: \"Step\"\n  }, mdx(\"h1\", null, \"Benefit of using TDD\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"5\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"5\"\n  }), \"# Develop highly usable software\\n# Reduce bugs\\n# Identify functionality issues\\n# Avoid code duplication\\n# Simplify code\\n\"))), mdx(Step, {\n    subtitle: \"The team of developers can use TDD to effectively determine how good the code is.\",\n    mdxType: \"Step\"\n  }, mdx(\"h1\", null, \"Benefit of using TDD\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"6\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"6\"\n  }), \"# Develop highly usable software\\n# Reduce bugs\\n# Identify functionality issues\\n# Avoid code duplication\\n# Simplify code\\n# Check the quality of the code\\n\")))), mdx(\"hr\", null), mdx(\"h1\", null, \"Simple Example Backend Unit Test\"), mdx(\"p\", null, \"Todo App Using:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Express\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Jest for running the test and assertion\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Supertest npm package for API test\")), mdx(\"hr\", null), mdx(\"h1\", null, \"Endpoints\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Read the list of user todos GET /v1/api/todos\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Store my todo on POST /api/v1/todos\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Delete the todo by ID from database DELETE /v1/api/todos/:id\")), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [github, vsDark],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    subtitle: \"First thing first: We must define all the test cases\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"Scenario: Get list of todos on GET /api/v1/todos\\n- Should return empty data if no todos\\n- Should return my todos\\n\")), mdx(\"img\", {\n    src: todoapp,\n    alt: \"todo\"\n  }))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [github, vsDark],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    subtitle: \"Wrap scenario into describe statement\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"1\"\n  }), \"Scenario: Get list of todos on GET /api/v1/todos\\n- Should return empty data if no todos\\n- Should return my todos\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"1:3\",\n    \"1:3\": true\n  }), \"describe('Get list of todos on GET /api/v1/todos =>', () => {\\n    // All the testcase should be written in here\\n});\\n\"))), mdx(Step, {\n    subtitle: \"Wrap testcase using it statement\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"2\"\n  }), \"Scenario: Get list of todos on GET /api/v1/todos\\n- Should return empty data if no todos\\n- Should return my todos\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"2:4\",\n    \"2:4\": true\n  }), \"describe('Get list of todos on GET /api/v1/todos =>', () => {\\n  it ('should return empty data if no todos', () => {\\n    // test assertion should be placed in here\\n  });\\n});\\n\"))), mdx(Step, {\n    subtitle: \"Second testcase\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"3\"\n  }), \"Scenario: Get list of todos on GET /api/v1/todos\\n- Should return empty data if no todos\\n- Should return my todos\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"6:8\",\n    \"6:8\": true\n  }), \"describe('Get list of todos on GET /api/v1/todos =>', () => {\\n  it ('should return empty data if no todos', () => {\\n    // test assertion should be placed in here\\n  });\\n\\n  it ('should return my todos', () => {\\n    // test assertion should be placed in here\\n  });\\n});\\n\"))), mdx(Step, {\n    subtitle: \"Import supertest and express js server runner\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"Scenario: Get list of todos on GET /api/v1/todos\\n- Should return empty data if no todos\\n- Should return my todos\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"1:3\",\n    \"1:3\": true\n  }), \"import supertest from 'supertest';\\nimport server from '../../server';\\nimport db from '../../db'; // this should be the query builder eg. sequelize, knexjs etc\\n\\ndescribe('Get list of todos on GET /api/v1/todos =>', () => {\\n  it ('should return empty data if no todos', () => {\\n    // test assertion should be placed in here\\n  });\\n\\n  it ('should return my todos', () => {\\n    // test assertion should be placed in here\\n  });\\n});\\n\"))), mdx(Step, {\n    subtitle: \"Write the test assertion\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"2\"\n  }), \"Scenario: Get list of todos on GET /api/v1/todos\\n- Should return empty data if no todos\\n- Should return my todos\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"7\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"7\"\n  }), \"import supertest from 'supertest';\\nimport server from '../../server';\\nimport db from '../../db'; // this should be the query builder eg. sequelize, knexjs etc\\n\\ndescribe('Get list of todos on GET /api/v1/todos =>', () => {\\n  it ('should return empty data if no todos', () => {\\n    // validate the database has no rows\\n  });\\n\\n  it ('should return my todos', () => {\\n    // test assertion should be placed in here\\n  });\\n});\\n\"))), mdx(Step, {\n    subtitle: \"Write the test assertion\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"2\"\n  }), \"Scenario: Get list of todos on GET /api/v1/todos\\n- Should return empty data if no todos\\n- Should return my todos\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"9\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"9\"\n  }), \"import supertest from 'supertest';\\nimport server from '../../server';\\nimport db from '../../db'; // this should be the query builder eg. sequelize, knexjs etc\\n\\ndescribe('Get list of todos on GET /api/v1/todos =>', () => {\\n  it ('should return empty data if no todos', () => {\\n    // validate the database has no rows\\n\\n    // validate the GET /api/v1/todos returns empty array\\n  });\\n\\n  it ('should return my todos', () => {\\n    // test assertion should be placed in here\\n  });\\n});\\n\"))), mdx(Step, {\n    subtitle: \"Write the test assertion\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"2\"\n  }), \"Scenario: Get list of todos on GET /api/v1/todos\\n- Should return empty data if no todos\\n- Should return my todos\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"6:12\",\n    \"6:12\": true\n  }), \"import supertest from 'supertest';\\nimport server from '../../server';\\nimport db from '../../db'; // this should be the query builder eg. sequelize, knexjs etc\\n\\ndescribe('Get list of todos on GET /api/v1/todos =>', () => {\\n  it ('should return empty data if no todos', async () => {\\n    // validate the database has no rows\\n    const rowsCount = await db.todos.count();\\n    expect(rowsCount).toBe(0); // expect that we don't have any rows on todos table\\n\\n    // validate the GET /api/v1/todos returns empty array\\n  });\\n\\n  it ('should return my todos', () => {\\n    // test assertion should be placed in here\\n  });\\n});\\n\"))), mdx(Step, {\n    subtitle: \"async, await\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"2\"\n  }), \"Scenario: Get list of todos on GET /api/v1/todos\\n- Should return empty data if no todos\\n- Should return my todos\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"6[47:52],8[22:27]\",\n    \"6[47:52],8[22:27]\": true\n  }), \"import supertest from 'supertest';\\nimport server from '../../server';\\nimport db from '../../db'; // this should be the query builder eg. sequelize, knexjs etc\\n\\ndescribe('Get list of todos on GET /api/v1/todos =>', () => {\\n  it ('should return empty data if no todos', async () => {\\n    // validate the database has no rows\\n    const rowsCount = await db.todos.count();\\n    expect(rowsCount).toBe(0); // expect that we don't have any rows on todos table\\n\\n    // validate the GET /api/v1/todos returns empty array\\n  });\\n\\n  it ('should return my todos', () => {\\n    // test assertion should be placed in here\\n  });\\n});\\n\"))), mdx(Step, {\n    subtitle: \"Get total todos count on the database on todos table\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"2\"\n  }), \"Scenario: Get list of todos on GET /api/v1/todos\\n- Should return empty data if no todos\\n- Should return my todos\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"8\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"8\"\n  }), \"import supertest from 'supertest';\\nimport server from '../../server';\\nimport db from '../../db'; // this should be the query builder eg. sequelize, knexjs etc\\n\\ndescribe('Get list of todos on GET /api/v1/todos =>', () => {\\n  it ('should return empty data if no todos', async () => {\\n    // validate the database has no rows\\n    const rowsCount = await db.todos.count();\\n    expect(rowsCount).toBe(0); // expect that we don't have any rows on todos table\\n\\n    // validate the GET /api/v1/todos returns empty array\\n  });\\n\\n  it ('should return my todos', () => {\\n    // test assertion should be placed in here\\n  });\\n});\\n\"))), mdx(Step, {\n    subtitle: \"Expect it should return zero row\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"2\"\n  }), \"Scenario: Get list of todos on GET /api/v1/todos\\n- Should return empty data if no todos\\n- Should return my todos\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"9\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"9\"\n  }), \"import supertest from 'supertest';\\nimport server from '../../server';\\nimport db from '../../db'; // this should be the query builder eg. sequelize, knexjs etc\\n\\ndescribe('Get list of todos on GET /api/v1/todos =>', () => {\\n  it ('should return empty data if no todos', async () => {\\n    // validate the database has no rows\\n    const rowsCount = await db.todos.count();\\n    expect(rowsCount).toBe(0); // expect that we don't have any rows on todos table\\n\\n    // validate the GET /api/v1/todos returns empty array\\n  });\\n\\n  it ('should return my todos', () => {\\n    // test assertion should be placed in here\\n  });\\n});\\n\"))), mdx(Step, {\n    subtitle: \"Write the test assertion\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"2\"\n  }), \"Scenario: Get list of todos on GET /api/v1/todos\\n- Should return empty data if no todos\\n- Should return my todos\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"6:16\",\n    \"6:16\": true\n  }), \"import supertest from 'supertest';\\nimport server from '../../server';\\nimport db from '../../db'; // this should be the query builder eg. sequelize, knexjs etc\\n\\ndescribe('Get list of todos on GET /api/v1/todos =>', () => {\\n  it ('should return empty data if no todos', async () => {\\n    // validate the database has no rows\\n    const rowsCount = await db.todos.count();\\n    expect(rowsCount).toBe(0); // expect that we don't have any rows on todos table\\n\\n    // validate the GET /api/v1/todos returns empty array\\n    await supertest(server)\\n        .get('/api/v1/todos')\\n        .expect(200) // expect that the http status code should be 200 (success)\\n        .expect([]); // has empty response\\n  });\\n\\n  it ('should return my todos', () => {\\n    // test assertion should be placed in here\\n  });\\n});\\n\"))), mdx(Step, {\n    subtitle: \"Simulate sending GET request to GET /v1/todos endpoint\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"2\"\n  }), \"Scenario: Get list of todos on GET /api/v1/todos\\n- Should return empty data if no todos\\n- Should return my todos\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"13\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"13\"\n  }), \"import supertest from 'supertest';\\nimport server from '../../server';\\nimport db from '../../db'; // this should be the query builder eg. sequelize, knexjs etc\\n\\ndescribe('Get list of todos on GET /api/v1/todos =>', () => {\\n  it ('should return empty data if no todos', async () => {\\n    // validate the database has no rows\\n    const rowsCount = await db.todos.count();\\n    expect(rowsCount).toBe(0); // expect that we don't have any rows on todos table\\n\\n    // validate the GET /api/v1/todos returns empty array\\n    await supertest(server)\\n        .get('/api/v1/todos')\\n        .expect(200) // expect that the http status code should be 200 (success)\\n        .expect([]); // has empty response\\n  });\\n\\n  it ('should return my todos', () => {\\n    // test assertion should be placed in here\\n  });\\n});\\n\"))), mdx(Step, {\n    subtitle: \"Expect the HTTP status should return success response\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"2\"\n  }), \"Scenario: Get list of todos on GET /api/v1/todos\\n- Should return empty data if no todos\\n- Should return my todos\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"14\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"14\"\n  }), \"import supertest from 'supertest';\\nimport server from '../../server';\\nimport db from '../../db'; // this should be the query builder eg. sequelize, knexjs etc\\n\\ndescribe('Get list of todos on GET /api/v1/todos =>', () => {\\n  it ('should return empty data if no todos', async () => {\\n    // validate the database has no rows\\n    const rowsCount = await db.todos.count();\\n    expect(rowsCount).toBe(0); // expect that we don't have any rows on todos table\\n\\n    // validate the GET /api/v1/todos returns empty array\\n    await supertest(server)\\n        .get('/api/v1/todos')\\n        .expect(200) // expect that the http status code should be 200 (success)\\n        .expect([]); // has empty response\\n  });\\n\\n  it ('should return my todos', () => {\\n    // test assertion should be placed in here\\n  });\\n});\\n\"))), mdx(Step, {\n    subtitle: \"Expect the endpoint return an empty JSON array\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"2\"\n  }), \"Scenario: Get list of todos on GET /api/v1/todos\\n- Should return empty data if no todos\\n- Should return my todos\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"15\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"15\"\n  }), \"import supertest from 'supertest';\\nimport server from '../../server';\\nimport db from '../../db'; // this should be the query builder eg. sequelize, knexjs etc\\n\\ndescribe('Get list of todos on GET /api/v1/todos =>', () => {\\n  it ('should return empty data if no todos', async () => {\\n    // validate the database has no rows\\n    const rowsCount = await db.todos.count();\\n    expect(rowsCount).toBe(0); // expect that we don't have any rows on todos table\\n\\n    // validate the GET /api/v1/todos returns empty array\\n    await supertest(server)\\n        .get('/api/v1/todos')\\n        .expect(200) // expect that the http status code should be 200 (success)\\n        .expect([]); // has empty response\\n  });\\n\\n  it ('should return my todos', () => {\\n    // test assertion should be placed in here\\n  });\\n});\\n\"))), mdx(Step, {\n    subtitle: \"Write test assertion for should return todo list with data\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"3\"\n  }), \"Scenario: Get list of todos on GET /api/v1/todos\\n- Should return empty data if no todos\\n- Should return my todos\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"8:10\",\n    \"8:10\": true\n  }), \"import supertest from 'supertest';\\nimport server from '../../server';\\nimport db from '../../db'; // this should be the query builder eg. sequelize, knexjs etc\\n\\ndescribe('Get list of todos on GET /api/v1/todos =>', () => {\\n  // ... Should return empty data if no todos\\n\\n  it ('should return my todos', () => {\\n    // test assertion should be placed in here\\n  });\\n});\\n\"))), mdx(Step, {\n    subtitle: \"Write test assertion for should return todo list with data\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"3\"\n  }), \"Scenario: Get list of todos on GET /api/v1/todos\\n- Should return empty data if no todos\\n- Should return my todos\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"9\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"9\"\n  }), \"import supertest from 'supertest';\\nimport server from '../../server';\\nimport db from '../../db'; // this should be the query builder eg. sequelize, knexjs etc\\n\\ndescribe('Get list of todos on GET /api/v1/todos =>', () => {\\n  // ... Should return empty data if no todos\\n\\n  it ('should return my todos', () => {\\n    // insert fake data to todos table\\n  });\\n});\\n\"))), mdx(Step, {\n    subtitle: \"Write test assertion for should return todo list with data\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"3\"\n  }), \"Scenario: Get list of todos on GET /api/v1/todos\\n- Should return empty data if no todos\\n- Should return my todos\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"11\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"11\"\n  }), \"import supertest from 'supertest';\\nimport server from '../../server';\\nimport db from '../../db'; // this should be the query builder eg. sequelize, knexjs etc\\n\\ndescribe('Get list of todos on GET /api/v1/todos =>', () => {\\n  // ... Should return empty data if no todos\\n\\n  it ('should return my todos', () => {\\n    // insert fake data to todos table\\n\\n    // validate the GET /api/v1/todos returns a JSON array with fake data\\n  });\\n});\\n\"))), mdx(Step, {\n    subtitle: \"Insert using query builder\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"3\"\n  }), \"Scenario: Get list of todos on GET /api/v1/todos\\n- Should return empty data if no todos\\n- Should return my todos\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"8:14\",\n    \"8:14\": true\n  }), \"import supertest from 'supertest';\\nimport server from '../../server';\\nimport db from '../../db'; // this should be the query builder eg. sequelize, knexjs etc\\n\\ndescribe('Get list of todos on GET /api/v1/todos =>', () => {\\n  // ... Should return empty data if no todos\\n\\n  it ('should return my todos', async () => {\\n    // insert fake data to todos table\\n    const todos = [\\n      { name: 'My first todo' },\\n      { name: 'My second todo' },\\n    ];\\n    const storedTodos = await db.todos.bulkCreate(todos);\\n\\n    // validate the GET /api/v1/todos returns a JSON array with fake data\\n  });\\n});\\n\"))), mdx(Step, {\n    subtitle: \"Insert fake data using factory package\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"3\"\n  }), \"Scenario: Get list of todos on GET /api/v1/todos\\n- Should return empty data if no todos\\n- Should return my todos\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"3,5:10,16:18\",\n    \"3,5:10,16:18\": true\n  }), \"import supertest from 'supertest';\\nimport server from '../../server';\\nimport db from '../../db'; // this should be the query builder eg. sequelize, knexjs etc\\n\\nimport factory from 'factory-girl';\\nimport { faker } from '@faker-js/faker';\\n\\nfactory.define('Todo', db.todo, {\\n  name: faker.name.findName(),\\n});\\n\\ndescribe('Get list of todos on GET /api/v1/todos =>', () => {\\n  // ... Should return empty data if no todos\\n\\n  it ('should return my todos', async () => {\\n    // insert fake data to todos table\\n    const todos = await factory.create('Todo', 5);\\n\\n    // validate the GET /api/v1/todos returns a JSON array with fake data\\n  });\\n});\\n\"))), mdx(Step, {\n    subtitle: \"Assert the result\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"3\"\n  }), \"Scenario: Get list of todos on GET /api/v1/todos\\n- Should return empty data if no todos\\n- Should return my todos\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"19:23\",\n    \"19:23\": true\n  }), \"import supertest from 'supertest';\\nimport server from '../../server';\\nimport db from '../../db'; // this should be the query builder eg. sequelize, knexjs etc\\n\\nimport factory from 'factory-girl';\\nimport { faker } from '@faker-js/faker';\\n\\nfactory.define('Todo', db.todo, {\\n  name: faker.name.findName(),\\n});\\n\\ndescribe('Get list of todos on GET /api/v1/todos =>', () => {\\n  // ... Should return empty data if no todos\\n\\n  it ('should return my todos', async () => {\\n    // insert fake data to todos table\\n    const todos = await factory.create('Todo', 5);\\n\\n    // validate the GET /api/v1/todos returns a JSON array with fake data\\n    await supertest(server)\\n      .get('/api/v1/todos')\\n      .expect(200)\\n      .expect(todos); // expect the result must same as rows on database\\n  });\\n});\\n\"))), mdx(Step, {\n    subtitle: \"Simulate hit GET /api/v1/todos\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"3\"\n  }), \"Scenario: Get list of todos on GET /api/v1/todos\\n- Should return empty data if no todos\\n- Should return my todos\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"21\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"21\"\n  }), \"import supertest from 'supertest';\\nimport server from '../../server';\\nimport db from '../../db'; // this should be the query builder eg. sequelize, knexjs etc\\n\\nimport factory from 'factory-girl';\\nimport { faker } from '@faker-js/faker';\\n\\nfactory.define('Todo', db.todo, {\\n  name: faker.name.findName(),\\n});\\n\\ndescribe('Get list of todos on GET /api/v1/todos =>', () => {\\n  // ... Should return empty data if no todos\\n\\n  it ('should return my todos', async () => {\\n    // insert fake data to todos table\\n    const todos = await factory.create('Todo', 5);\\n\\n    // validate the GET /api/v1/todos returns a JSON array with fake data\\n    await supertest(server)\\n      .get('/api/v1/todos')\\n      .expect(200)\\n      .expect(todos); // expect the result must same as rows on database\\n  });\\n});\\n\"))), mdx(Step, {\n    subtitle: \"Assert that the HTTP status should return success status\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"3\"\n  }), \"Scenario: Get list of todos on GET /api/v1/todos\\n- Should return empty data if no todos\\n- Should return my todos\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"22\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"22\"\n  }), \"import supertest from 'supertest';\\nimport server from '../../server';\\nimport db from '../../db'; // this should be the query builder eg. sequelize, knexjs etc\\n\\nimport factory from 'factory-girl';\\nimport { faker } from '@faker-js/faker';\\n\\nfactory.define('Todo', db.todo, {\\n  name: faker.name.findName(),\\n});\\n\\ndescribe('Get list of todos on GET /api/v1/todos =>', () => {\\n  // ... Should return empty data if no todos\\n\\n  it ('should return my todos', async () => {\\n    // insert fake data to todos table\\n    const todos = await factory.create('Todo', 5);\\n\\n    // validate the GET /api/v1/todos returns a JSON array with fake data\\n    await supertest(server)\\n      .get('/api/v1/todos')\\n      .expect(200)\\n      .expect(todos); // expect the result must same as rows on database\\n  });\\n});\\n\"))), mdx(Step, {\n    subtitle: \"Assert that the JSON response must same as fake data on todos table\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"3\"\n  }), \"Scenario: Get list of todos on GET /api/v1/todos\\n- Should return empty data if no todos\\n- Should return my todos\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"17[11:16],23\",\n    \"17[11:16],23\": true\n  }), \"import supertest from 'supertest';\\nimport server from '../../server';\\nimport db from '../../db'; // this should be the query builder eg. sequelize, knexjs etc\\n\\nimport factory from 'factory-girl';\\nimport { faker } from '@faker-js/faker';\\n\\nfactory.define('Todo', db.todo, {\\n  name: faker.name.findName(),\\n});\\n\\ndescribe('Get list of todos on GET /api/v1/todos =>', () => {\\n  // ... Should return empty data if no todos\\n\\n  it ('should return my todos', async () => {\\n    // insert fake data to todos table\\n    const todos = await factory.create('Todo', 5);\\n\\n    // validate the GET /api/v1/todos returns a JSON array with fake data\\n    await supertest(server)\\n      .get('/api/v1/todos')\\n      .expect(200)\\n      .expect(todos); // expect the result must same as rows on database\\n  });\\n});\\n\")))), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"Always Refresh The Database\\n\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"describe('Get list of todos on GET /api/v1/todos =>', () => {\\n  beforeAll(async () => {\\n    // script in here will start before all the test case\\n  });\\n\\n  // your test cases\\n  it('should buy a coffee', () => ...);\\n  it('should buy a course', () => ...);\\n\\n  afterAll(async () => {\\n    // script in here will start before all the test case\\n  });\\n});\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import '../../db';\\n\\ndescribe('Get list of todos on GET /api/v1/todos =>', () => {\\n  beforeAll(async () => {\\n    // drop all tables and migrate the database schema\\n    await db.sequelize.sync({ force: true });\\n  });\\n\\n  // your test cases\\n  it('should buy a coffee', () => ...);\\n  it('should buy a course', () => ...);\\n\\n  afterAll(async () => {\\n    // After all tests have finished, close the DB connection\\n    await db.sequelize.close();\\n  })\\n});\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"There are many option you can do with jest eg. beforeEach, afterEach etc\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"Assertion syntax eg. expect(value).toBe(1), .toBeTruthy(), .toBeFalsy() etc https://jestjs.io/docs/expect\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"What's next ?\"), mdx(\"hr\", null), mdx(\"h1\", null, \"Run the test\"), mdx(\"center\", null, \"The test result of course will fail because we haven't write our code for the GET /api/v1/todos endpoint yet\"), mdx(\"br\", null), mdx(\"img\", {\n    src: fail,\n    alt: \"test-fail\"\n  }), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"div\", null, mdx(\"ul\", null, mdx(\"li\", null, \"Write the functionality of GET /api/v1/todos endpoint\"), mdx(\"li\", null, \"Run the test again\"), mdx(\"li\", null, \"If any error, fix the problem either the functionality or the test case itself\"), mdx(\"li\", null, \"Iterate... \"))), mdx(\"div\", null, mdx(\"img\", {\n    style: {\n      maxHeight: 600\n    },\n    src: tddFLow,\n    alt: \"Flow\"\n  })))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"What about POST /api/v1/todos endpoint ?\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"Scenario: Store my todo on POST /api/v1/todos\\n- should store my todo\\n- should return error 422 on submitting without sending required value\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"  describe('Store my todo on POST /api/v1/todos =>', function () {\\n    it('should store my todo', async function () {\\n\\n    });\\n\\n    it('should return error 422 on submitting without sending required value', async function () {\\n\\n    });\\n  });\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"2:22\",\n    \"2:22\": true\n  }), \"  describe('Store my todo on POST /api/v1/todos =>', function () {\\n    it('should store my todo', async function () {\\n      const body = {\\n        name: 'Review PR',\\n      };\\n      await supertest(server)\\n        .post('/api/v1/todos')\\n        .send(body)\\n        .expect(201)\\n        .expect({\\n          message: 'success'\\n        });\\n\\n      // assert that the given body stored successfully into todos table\\n      const result = await db.todos.findAll({\\n        where: {\\n          name: 'Review PR',\\n        }\\n      });\\n\\n      expect(result.length).toBe(1); // expect data must be exists in our database\\n    });\\n\\n    it('should return error 422 on submitting without sending required value', async function () {\\n\\n    });\\n  });\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"6:12\",\n    \"6:12\": true\n  }), \"  describe('Store my todo on POST /api/v1/todos =>', function () {\\n    it('should store my todo', async function () {\\n      const body = {\\n        name: 'Review PR',\\n      };\\n      await supertest(server)\\n        .post('/api/v1/todos')\\n        .send(body)\\n        .expect(201)\\n        .expect({\\n          message: 'success'\\n        });\\n\\n      // assert that the given body stored successfully into todos table\\n      const result = await db.todos.findAll({\\n        where: {\\n          name: 'Review PR',\\n        }\\n      });\\n\\n      expect(result.length).toBe(1); // expect data must be exists in our database\\n    });\\n\\n    it('should return error 422 on submitting without sending required value', async function () {\\n\\n    });\\n  });\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"15:19\",\n    \"15:19\": true\n  }), \"  describe('Store my todo on POST /api/v1/todos =>', function () {\\n    it('should store my todo', async function () {\\n      const body = {\\n        name: 'Review PR',\\n      };\\n      await supertest(server)\\n        .post('/api/v1/todos')\\n        .send(body)\\n        .expect(201)\\n        .expect({\\n          message: 'success'\\n        });\\n\\n      // assert that the given body stored successfully into todos table\\n      const result = await db.todos.findAll({\\n        where: {\\n          name: 'Review PR',\\n        }\\n      });\\n\\n      expect(result.length).toBe(1); // expect data must be exists in our database\\n    });\\n\\n    it('should return error 422 on submitting without sending required value', async function () {\\n\\n    });\\n  });\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"21\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"21\"\n  }), \"  describe('Store my todo on POST /api/v1/todos =>', function () {\\n    it('should store my todo', async function () {\\n      const body = {\\n        name: 'Review PR',\\n      };\\n      await supertest(server)\\n        .post('/api/v1/todos')\\n        .send(body)\\n        .expect(201)\\n        .expect({\\n          message: 'success'\\n        });\\n\\n      // assert that the given body stored successfully into todos table\\n      const result = await db.todos.findAll({\\n        where: {\\n          name: 'Review PR',\\n        }\\n      });\\n\\n      expect(result.length).toBe(1); // expect data must be exists in our database\\n    });\\n\\n    it('should return error 422 on submitting without sending required value', async function () {\\n\\n    });\\n  });\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"  describe('Store my todo on POST /api/v1/todos =>', function () {\\n    it('should store my todo', async function () {\\n      const body = {\\n        name: 'Review PR',\\n      };\\n      await supertest(server)\\n        .post('/api/v1/todos')\\n        .send(body)\\n        .expect(201)\\n        .expect({\\n          message: 'success'\\n        });\\n\\n      // assert that the given body stored successfully into todos table\\n      const result = await db.todos.findAll({\\n        where: {\\n          name: 'Review PR',\\n        }\\n      });\\n\\n      expect(result.length).toBe(1); // expect data must be exists in our database\\n    });\\n\\n    it('should return error 422 on submitting without sending required value', async function () {\\n      const body = {\\n        name: '',\\n      };\\n      await supertest(server)\\n        .post('/api/v1/todos')\\n        .send(body)\\n        .expect(422)\\n        .expect({\\n          message: 'Invalid value',\\n          error: {\\n            name: ['value is required'],\\n          },\\n        });\\n\\n      // get the total row count of our todos table\\n      const count = await db.todos.count();\\n\\n      // expect that there are no new row created after hit this endpoint\\n      expect(count).toBe(0);\\n    });\\n  });\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"28:37\",\n    \"28:37\": true\n  }), \"  describe('Store my todo on POST /api/v1/todos =>', function () {\\n    it('should store my todo', async function () {\\n      const body = {\\n        name: 'Review PR',\\n      };\\n      await supertest(server)\\n        .post('/api/v1/todos')\\n        .send(body)\\n        .expect(201)\\n        .expect({\\n          message: 'success'\\n        });\\n\\n      // assert that the given body stored successfully into todos table\\n      const result = await db.todos.findAll({\\n        where: {\\n          name: 'Review PR',\\n        }\\n      });\\n\\n      expect(result.length).toBe(1); // expect data must be exists in our database\\n    });\\n\\n    it('should return error 422 on submitting without sending required value', async function () {\\n      const body = {\\n        name: '',\\n      };\\n      await supertest(server)\\n        .post('/api/v1/todos')\\n        .send(body)\\n        .expect(422)\\n        .expect({\\n          message: 'Invalid value',\\n          error: {\\n            name: ['value is required'],\\n          },\\n        });\\n\\n      // get the total row count of our todos table\\n      const count = await db.todos.count();\\n\\n      // expect that there are no new row created after hit this endpoint\\n      expect(count).toBe(0);\\n    });\\n  });\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"39:43\",\n    \"39:43\": true\n  }), \"  describe('Store my todo on POST /api/v1/todos =>', function () {\\n    it('should store my todo', async function () {\\n      const body = {\\n        name: 'Review PR',\\n      };\\n      await supertest(server)\\n        .post('/api/v1/todos')\\n        .send(body)\\n        .expect(201)\\n        .expect({\\n          message: 'success'\\n        });\\n\\n      // assert that the given body stored successfully into todos table\\n      const result = await db.todos.findAll({\\n        where: {\\n          name: 'Review PR',\\n        }\\n      });\\n\\n      expect(result.length).toBe(1); // expect data must be exists in our database\\n    });\\n\\n    it('should return error 422 on submitting without sending required value', async function () {\\n      const body = {\\n        name: '',\\n      };\\n      await supertest(server)\\n        .post('/api/v1/todos')\\n        .send(body)\\n        .expect(422)\\n        .expect({\\n          message: 'Invalid value',\\n          error: {\\n            name: ['value is required'],\\n          },\\n        });\\n\\n      // get the total row count of our todos table\\n      const count = await db.todos.count();\\n\\n      // expect that there are no new row created after hit this endpoint\\n      expect(count).toBe(0);\\n    });\\n  });\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"What about DELETE /api/v1/todos/:id endpoint ?\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Practice make improvement!\"), mdx(\"h3\", null, \"Give it a try, you can do it :)\"), mdx(\"p\", null, \"This is your first task. You can start with write the test scenario first.\"), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"console.log('Thanks! \\uD83D\\uDC4B');\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"7f9781ba-9181-5202-b30c-15c2405dd673","slug":"","title":"Test-driven Development (TDD)"}}}